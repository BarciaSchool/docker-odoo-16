# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from osv import osv
from osv import fields
from tools.translate import _
import netsvc

class account_invoice(osv.osv):
    _name = 'account.invoice'
    _inherit = 'account.invoice'
    
    _columns = {
        'splitter_invoice_id': fields.many2one('account.invoice', 'Splitter Invoice',
                    help='This field contain the invoice that was splitted, generating another invoice.'),
        'splitted_invoice_id': fields.many2one('account.invoice', 'Generated Invoice',
                    help='This field contain the invoice generated by splitting the current one.'),
    }
    
    def copy(self, cr, uid, id, default=None, context=None):
        '''
        When an Invoice is copied the splitter and splitted invoices is not copy.
        '''
        if default is None:
            default = {}
        default['splitter_invoice_id'] = None
        default['splitted_invoice_id'] = None
        return super(account_invoice, self).copy(cr, uid, id, default=default, context=context)
    
    def get_report_configuration(self, cr, uid, ids, context=None):
        report_conf_obj = self.pool.get('report_aeroo_generator.report_configuration')
        
        invoice = self.browse(cr, uid, ids, context=context)
        if isinstance(invoice, list):
            invoice = invoice[0]
        
        account_invoice_state = False
        if invoice.state in ['proforma', 'proforma2']:
            account_invoice_state = 'proforma'
        elif invoice.state in ['open', 'paid', 'sale']:
            account_invoice_state = 'approved_invoice'
        
        report_conf = False
        
        filters = [('type','=','account.invoice'), ('account_invoice_state','=',account_invoice_state)]
        report_conf_ids = report_conf_obj.search(cr, uid, filters, context=context)
        
        for report_conf_it in report_conf_obj.browse(cr, uid, report_conf_ids, context=context):
            journal_ids = [journal.id for journal in report_conf_it.account_invoice_journal_ids]
            if invoice.journal_id.id in journal_ids:
                report_conf = report_conf_it
                break
        
        if not report_conf:
            if report_conf_ids:
                report_conf = report_conf_obj.browse(cr, uid, report_conf_ids, context=context)
                if isinstance(report_conf, list):
                    report_conf = report_conf[0]
        
        if not report_conf:
            filters = [('type','=','account.invoice')]
            report_conf_ids = report_conf_obj.search(cr, uid, filters, context=context)
            
            for report_conf_it in report_conf_obj.browse(cr, uid, report_conf_ids, context=context):
                journal_ids = [journal.id for journal in report_conf_it.account_invoice_journal_ids]
                if invoice.journal_id.id in journal_ids:
                    report_conf = report_conf_it
                    break
        
        if not report_conf:
            filters = [('type','=','account.invoice')]
            report_conf_ids = report_conf_obj.search(cr, uid, filters, context=context)
            if report_conf_ids:
                report_conf = report_conf_obj.browse(cr, uid, report_conf_ids, context=context)
                if isinstance(report_conf, list):
                    report_conf = report_conf[0]
        
        return report_conf
    
    def print_invoice(self, cr, uid, ids, context=None):
        report_conf = self.get_report_configuration(cr, uid, ids, context=context)
        
        title = _('No report defined')
        message = _('There is no report defined for Invoice with this parameters or for Invoice in general.')
        if report_conf:
            if report_conf.report_xml_id:
                context['report_conf_id'] = report_conf.id
                return {'type' : 'ir.actions.report.xml',
                        'context' : context,
                        'report_name': report_conf.report_xml_id.report_name}
            else:
                raise osv.except_osv(title, message)
        else:
            raise osv.except_osv(title, message)
    
    
    def split_invoice(self, cr, uid, ids, lines_to_split, context=None):
        '''
        Split the invoice when the lines exceed the maximum lines_to_split
        '''
        if not lines_to_split:
            return
        
        for inv in self.browse(cr, uid, ids, context=None):
            inv_id = False
            
            if inv.type in ["out_invoice","out_refund"]:
                
                if len(inv.invoice_line) > lines_to_split:
                    lst = []
                    invoice = self.read(cr, uid, inv.id, ['name', 'type', 'number', 'reference', 'comment', 'date_due', 'partner_id', 'address_contact_id', 'address_invoice_id', 'partner_contact', 'partner_insite', 'partner_ref', 'payment_term', 'account_id', 'currency_id', 'invoice_line', 'tax_line', 'journal_id', 'period_id'])
                    invoice.update({
                        'state': 'draft',
                        'number': False,
                        'invoice_line': [],
                        'tax_line': [],
                        'splitter_invoice_id': inv.id,
                    })
                    
                    # take the id part of the tuple returned for many2one fields
                    for field in ('address_contact_id', 'address_invoice_id', 'partner_id',
                            'account_id', 'currency_id', 'payment_term', 'journal_id', 'period_id'):
                        invoice[field] = invoice[field] and invoice[field][0]
                    
                    if hasattr(inv, 'sale_ids'):
                        if self.browse(cr, uid, inv.id, context={}).sale_ids:
                            invoice.update({
                                'sale_ids':[(6,0,[i.id for i in self.browse(cr, uid, inv.id, context={}).sale_ids])]
                            })
                        
                    inv_id = self.create(cr, uid, invoice)
                    cont = 0
                    lst = inv.invoice_line
                    while cont < lines_to_split:
                        lst.pop(0)
                        cont += 1
                    for il in lst:
                        self.pool.get('account.invoice.line').write(cr,uid,il.id,{'invoice_id': inv_id})
                    self.button_compute(cr, uid, [inv.id], set_total=True)
            
            if inv_id:
                wf_service = netsvc.LocalService("workflow")
                self.button_compute(cr, uid, [inv_id], set_total=True)
                #wf_service.trg_validate(uid, 'account.invoice', inv_id, 'invoice_open', cr)
        return True
    
    def action_date_assign(self, cr, uid, ids, *args):
        data = super(account_invoice, self).action_date_assign(cr, uid, ids, *args)
        report_conf = self.get_report_configuration(cr, uid, ids)
        if report_conf and report_conf.account_invoice_split_invoice and report_conf.account_invoice_lines_to_split:
            self.split_invoice(cr, uid, ids, report_conf.account_invoice_lines_to_split)
        return True
    
account_invoice()
























